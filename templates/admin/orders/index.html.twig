{% extends 'base.html.twig' %}

{% block title %}Commandes{% endblock %}

{% block body %}
<style>
/* ===== Badges de statut (lisibles sur fond clair & sombre) ===== */
.status-badge{
  display:inline-block; font-size:.75rem; font-weight:600; line-height:1;
  padding:.35em .6em; border-radius:.35rem; border:1px solid transparent;
  white-space:nowrap; user-select:none;
}
.status-unknown{ background:#e2e3e5; color:#41464b; border-color:#d3d6d8; }   /* — */
.status-draft{   background:#eef1f4; color:#495057; border-color:#d0d7de; }   /* Devis */
.status-sent{    background:#e7f1ff; color:#084298; border-color:#b6d4fe; }   /* Devis envoyé */
.status-sale{    background:#d1e7dd; color:#0f5132; border-color:#badbcc; }   /* Confirmée */
.status-done{    background:#d1e7dd; color:#0f5132; border-color:#badbcc; }   /* Terminée */
.status-cancel{  background:#f8d7da; color:#842029; border-color:#f5c2c7; }   /* Annulée */

.status-processing{ background:#fff3cd; color:#664d03; border-color:#ffecb5; } /* En préparation */
.status-ready{      background:#cfe2ff; color:#084298; border-color:#9ec5fe; } /* Prête */
.status-shipped{    background:#d1e7dd; color:#0f5132; border-color:#baddcc; } /* Expédiée */
.status-delivered{  background:#d1e7dd; color:#0f5132; border-color:#badbcc; } /* Livrée */
.status-error,
.status-failed{     background:#f8d7da; color:#842029; border-color:#f5c2c7; } /* Erreur */
.status-returned{   background:#e2e3e5; color:#41464b; border-color:#d3d6d8; } /* Retournée */

/* Divers */
.table th a { text-decoration: none; }
.filters .form-control, .filters .form-select { max-width: 260px; display: inline-block; }

/* Responsive: filtres et tableau */
@media (max-width: 992px) {
  /* Évite les retours à la ligne dans les cellules sur tablette */
  .table th, .table td { white-space: nowrap; }
}
@media (max-width: 768px) {
  /* Champs filtres plein largeur sur mobile */
  .filters .form-control, .filters .form-select { max-width: 100%; width: 100%; display: block; }
  .filters label { display: block; margin-left: 0 !important; }
}
/* Empiler et aligner les boutons d’actions sur smartphone */
@media (max-width: 576px) {
  .actions-bar { flex-direction: column; align-items: stretch; width: 100%; }
  .actions-bar .btn { width: 100%; }
}

/* Filtres: rangée flexible (6 blocs alignés, search plus large) */
.filters-row { display:flex; flex-wrap: wrap; align-items: end; gap:.5rem .75rem; }
.filters-row .filter-item { flex: 0 0 auto; }
.filters-row .filter-item.search { flex: 1 1 420px; min-width: 320px; }
.filters-row .date-range { display:flex; align-items:center; gap:.35rem; }
.filters-row .date-range input[type="date"] { min-width: 150px; }

/* Entêtes triables: libellé + flèche à droite, sans retour à la ligne */
th .sort-head{ white-space: nowrap; display:inline-flex; align-items:center; gap:.25rem; }
th .sort-head .sort-arrow{ font-size:.9em; opacity:.6; line-height:1; }
th .sort-head .sort-arrow.active{ opacity:1; font-weight:700; }
</style>

{# ==== Macro de tri (une seule flèche à droite, bascule asc/desc au clic) ==== #}
{% macro sort_link(label, col, sort, dir) %}
  {% set baseQs = app.request.query.all | merge({'sort': col, 'page': 1}) %}
  {% set nextDir = (sort == col and dir == 'asc') ? 'desc' : 'asc' %}
  {% set toggleQs = baseQs | merge({'dir': nextDir}) %}
  {% set arrow = '↕' %}
  {% set arrowClass = 'sort-arrow' %}
  {% if sort == col %}
    {% set arrow = (dir == 'asc') ? '▲' : '▼' %}
    {% set arrowClass = arrowClass ~ ' active' %}
  {% endif %}

  <span class="sort-head">
    <a href="{{ path(app.request.attributes.get('_route'), toggleQs) }}">{{ label }}</a>
    <span class="{{ arrowClass }}" aria-hidden="true">{{ arrow }}</span>
  </span>
{% endmacro %}
{% import _self as self %}

{# ==== Labels humainement lisibles ==== #}
{% set statusLabels = {
  'draft':'Devis', 'sent':'Devis envoyé', 'sale':'Confirmée', 'done':'Terminée', 'cancel':'Annulée',
  'processing':'En préparation', 'ready':'Prête', 'shipped':'Expédiée', 'delivered':'Livrée',
  'error':'Erreur', 'failed':'Échec', 'returned':'Retournée', 'unknown':'—'
} %}

{# Responsive géré via classes Bootstrap (d-none d-*-table-cell), pas de toggle de vue #}

<div class="container">
  <div class="flash-container"></div>

  <div class="d-flex align-items-center justify-content-between mb-3">
    <h1 class="h3 mb-0">Commandes</h1>
    <div class="d-flex align-items-center gap-2">
      <a class="btn btn-sm btn-outline-primary"
         href="{{ path('admin_orders_export', app.request.query.all) }}">
        Export CSV
      </a>
      <a class="btn btn-sm btn-outline-primary"
         href="{{ path('admin_orders_export', app.request.query.all | merge({'include_payload': 1})) }}">
        Export CSV + payload
      </a>
    </div>
  </div>

  {# ==== Toolbar (search centré, style contacts) ==== #}
  <form method="get"
        action="{{ path(app.request.attributes.get('_route')) }}"
        class="admin-toolbar-center d-flex align-items-center justify-content-between gap-2 flex-wrap mb-3">
    <div class="flex-grow-1 d-flex justify-content-center">
      <input type="search"
             id="q"
             name="q"
             value="{{ q }}"
             class="form-control form-control-w-560 form-control-tall"
             placeholder="Rechercher (ID externe, client, tracking)">
      {# Conserver les filtres existants lors d’une recherche #}
      <input type="hidden" name="status"         value="{{ status }}">
      <input type="hidden" name="source"         value="{{ source }}">
      <input type="hidden" name="prepared_by"    value="{{ prepared_by|default('') }}">
      <input type="hidden" name="carrier"        value="{{ carrier }}">
      <input type="hidden" name="placed_from"    value="{{ placed_from }}">
      <input type="hidden" name="placed_to"      value="{{ placed_to }}">
      <input type="hidden" name="delivery_state" value="{{ delivery_state|default('') }}">
      <input type="hidden" name="sort"           value="{{ sort }}">
      <input type="hidden" name="dir"            value="{{ dir }}">
    </div>
  </form>

  {# ==== Filtres (dropdowns + dates) ==== #}
  <form method="get" class="filters mb-3">
    <div class="row g-2">
      <div class="col-12 col-md-4 col-lg-2">
        <label class="form-label d-block">Statut</label>
        <select name="status" class="form-select">
          <option value="">— Statut —</option>
          <option value="draft" {{ status == 'draft' ? 'selected' : '' }}>Devis</option>
          <option value="sent" {{ status == 'sent' ? 'selected' : '' }}>Devis envoyé</option>
          <option value="sale" {{ status == 'sale' ? 'selected' : '' }}>Confirmée</option>
          <option value="done" {{ status == 'done' ? 'selected' : '' }}>Terminée</option>
          <option value="cancel" {{ status == 'cancel' ? 'selected' : '' }}>Annulée</option>
          <option value="processing" {{ status == 'processing' ? 'selected' : '' }}>En préparation</option>
          <option value="ready" {{ status == 'ready' ? 'selected' : '' }}>Prête</option>
          <option value="shipped" {{ status == 'shipped' ? 'selected' : '' }}>Expédiée</option>
          <option value="delivered" {{ status == 'delivered' ? 'selected' : '' }}>Livrée</option>
          <option value="error" {{ status == 'error' ? 'selected' : '' }}>Erreur</option>
          <option value="failed" {{ status == 'failed' ? 'selected' : '' }}>Échec</option>
          <option value="returned" {{ status == 'returned' ? 'selected' : '' }}>Retournée</option>
        </select>
      </div>

      <div class="col-12 col-md-4 col-lg-2">
        <label class="form-label d-block">Source</label>
        {% set sources = ['manual','odoo','web'] %}
        <select name="source" class="form-select">
          <option value="">— Source —</option>
          {% for s in sources %}
            <option value="{{ s }}" {{ source == s ? 'selected' : '' }}>{{ s|capitalize }}</option>
          {% endfor %}
          {% if source is not empty and source not in sources %}
            <option value="{{ source }}" selected>{{ source|capitalize }}</option>
          {% endif %}
        </select>
      </div>

      {# État (livraison) aligné Odoo: 4 états #}
      <div class="col-12 col-md-4 col-lg-2">
        <label class="form-label d-block">État (livraison)</label>
        <select name="delivery_state" class="form-select">
          <option value="">— État —</option>
          <option value="draft"    {{ delivery_state == 'draft'    ? 'selected' : '' }}>Brouillon</option>
          {# "En attente" couvre waiting et confirmed #}
          <option value="waiting"  {{ delivery_state in ['waiting','confirmed'] ? 'selected' : '' }}>En attente</option>
          <option value="assigned" {{ delivery_state == 'assigned' ? 'selected' : '' }}>Prêt</option>
          <option value="done"     {{ delivery_state == 'done'     ? 'selected' : '' }}>Terminé</option>
        </select>
      </div>

      <div class="col-12 col-md-4 col-lg-2">
        <label class="form-label d-block">Préparateur</label>
        <select name="prepared_by" class="form-select">
          <option value="">— Préparateur —</option>
          {% for p in preparers %}
            <option value="{{ p.email }}" {{ prepared_by is defined and prepared_by == p.email ? 'selected' : '' }}>{{ p.label }}</option>
          {% endfor %}
        </select>
      </div>

      <div class="col-12 col-md-4 col-lg-2">
        <label class="form-label d-block">Transporteur</label>
        <select name="carrier" class="form-select">
          <option value="">— Transporteur —</option>
          <option value="bpost" {{ carrier == 'bpost' ? 'selected' : '' }}>Bpost</option>
          <option value="pickup" {{ carrier == 'pickup' ? 'selected' : '' }}>Pickup</option>
        </select>
      </div>

      <div class="col-12 col-md-4 col-lg-2">
        <label class="form-label d-block">Du (commande)</label>
        <input type="date" name="placed_from" class="form-control" value="{{ placed_from }}">
      </div>

      <div class="col-12 col-md-4 col-lg-2">
        <label class="form-label d-block">Au (commande)</label>
        <input type="date" name="placed_to" class="form-control" value="{{ placed_to }}">
      </div>
    </div>

    <div class="row mt-2">
      <div class="col-12 d-flex justify-content-start justify-content-md-end">
        <div>
          <button class="btn btn-primary me-2">Filtrer</button>
          <a class="btn btn-outline-secondary" href="{{ path(app.request.attributes.get('_route')) }}">Réinitialiser</a>
        </div>
      </div>
    </div>
  </form>

  {# ==== Compteur + Import Odoo (Total) ==== #}
  <div class="d-flex justify-content-between align-items-center mb-2">
    <div><strong>{{ total }}</strong> résultat{{ total>1?'s':'' }}</div>

    {% set ids = [] %}
    {% for it in items %}{% set ids = ids|merge([it.id]) %}{% endfor %}
    {% set idsCsv = ids|join(',') %}

      {% set ids = [] %}
      {% for it in items %}{% set ids = ids|merge([it.id]) %}{% endfor %}
      {% set idsCsv = ids|join(',') %}

      <div class="actions-bar d-flex align-items-center flex-wrap" style="gap:.5rem;">
        <a class="btn btn-outline-primary btn-sm"
           href="{{ path('admin_odoo_import_by_ref', {'since':'all'}) }}">
           Importer Odoo (Total)
        </a>

        <form method="post" action="{{ path('admin_orders_refresh_states') }}" class="d-inline">
          <input type="hidden" name="_token" value="{{ csrf_token('orders_refresh') }}">
          <input type="hidden" name="ids" value="{{ idsCsv }}">
          {# Conserver filtres/tri/pagination pour revenir à la même vue #}
          <input type="hidden" name="q" value="{{ q }}">
          <input type="hidden" name="status" value="{{ status }}">
          <input type="hidden" name="source" value="{{ source }}">
          <input type="hidden" name="prepared_by" value="{{ prepared_by|default('') }}">
          <input type="hidden" name="carrier" value="{{ carrier }}">
          <input type="hidden" name="tracking" value="{{ tracking|default('') }}">
          <input type="hidden" name="placed_from" value="{{ placed_from }}">
          <input type="hidden" name="placed_to" value="{{ placed_to }}">
          <input type="hidden" name="delivery_state" value="{{ delivery_state|default('') }}">
          <input type="hidden" name="sort" value="{{ sort }}">
          <input type="hidden" name="dir" value="{{ dir }}">
          <input type="hidden" name="page" value="{{ page }}">
          <input type="hidden" name="per_page" value="{{ per_page }}">
          <input type="hidden" name="view" value="{{ view|default('full') }}">
          <button class="btn btn-outline-primary btn-sm">Rafraîchir états (page)</button>
        </form>

      <form method="post" action="{{ path('admin_orders_refresh_states') }}" class="d-inline">
        <input type="hidden" name="_token" value="{{ csrf_token('orders_refresh') }}">
        <input type="hidden" name="ids" value="{{ idsCsv }}">
        {# Conserver les filtres/tri/pagination #}
        <input type="hidden" name="q" value="{{ q }}">
        <input type="hidden" name="status" value="{{ status }}">
        <input type="hidden" name="source" value="{{ source }}">
        <input type="hidden" name="prepared_by" value="{{ prepared_by|default('') }}">
        <input type="hidden" name="carrier" value="{{ carrier }}">
        <input type="hidden" name="tracking" value="{{ tracking|default('') }}">
        <input type="hidden" name="placed_from" value="{{ placed_from }}">
        <input type="hidden" name="placed_to" value="{{ placed_to }}">
        <input type="hidden" name="delivery_state" value="{{ delivery_state|default('') }}">
        <input type="hidden" name="sort" value="{{ sort }}">
        <input type="hidden" name="dir" value="{{ dir }}">
        <input type="hidden" name="page" value="{{ page }}">
        <input type="hidden" name="per_page" value="{{ per_page }}">
        <input type="hidden" name="view" value="{{ view|default('full') }}">
        <button class="btn btn-outline-primary btn-sm">Rafraîchir états (page)</button>
      </form>
    </div>
  </div>

  <div class="table-responsive">
    <table class="table table-striped align-middle">
      <thead>
        <tr>
          <th>{{ self.sort_link('# de commande', 'external_order_id', sort, dir) }}</th>
          <th>{{ self.sort_link('Etat commande', 'status', sort, dir) }}</th>
          <th>{{ self.sort_link('Etat préparation', 'delivery_status', sort, dir) }}</th>
          {% if view != 'tablet' %}
            <th>{{ self.sort_link('Client', 'customer_name', sort, dir) }}</th>
          {% endif %}
          <th class="d-none d-lg-table-cell">{{ self.sort_link('Préparateur', 'prepared_by', sort, dir) }}</th>
          <th class="text-end d-none d-lg-table-cell">{{ self.sort_link('Nbr d\'articles', 'item_count', sort, dir) }}</th>
          <th class="d-none d-lg-table-cell">{{ self.sort_link('Source', 'source', sort, dir) }}</th>
          <th class="d-none d-lg-table-cell">{{ self.sort_link('Transporteur', 'shipping_carrier', sort, dir) }}</th>
          <th class="d-none d-md-table-cell">{{ self.sort_link('Commandé le', 'placed_at', sort, dir) }}</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
      {% for o in items %}
        {% set raw = (o.status ?? '') %}
        {% set key = raw ? raw|lower : 'unknown' %}
        {% set known = ['draft','sent','sale','done','cancel','processing','ready','shipped','delivered','error','failed','returned'] %}
        {% set key = key in known ? key : 'unknown' %}

        <tr data-order-id="{{ o.id }}">
          <td>
            <a href="{{ path('admin_orders_show', {'id': o.id}) }}"><code>{{ o.external_order_id }}</code></a>
          </td>

          {# ==== Statut (badge coloré) ==== #}
          <td>
            <span class="status-badge status-{{ key }}" data-field="status" title="{{ raw ?: '—' }}">
              {{ statusLabels[key] ?? (raw ?: '—') }}
            </span>
          </td>

          {# ==== Doc logistique: afficher l'état de livraison avec libellés FR et code couleur ==== #}
          <td>
            {% set dRaw = (o.delivery_state ?? '') %}
            {% set dKey = dRaw ? dRaw|lower : '' %}
            {% set dKnown = ['draft','waiting','confirmed','assigned','done','cancel'] %}
            {% set dKey = dKey in dKnown ? dKey : '' %}
            {% set dClassMap = {
              'draft':'status-draft',
              'waiting':'status-processing',
              'confirmed':'status-processing',
              'assigned':'status-ready',
              'done':'status-done',
              'cancel':'status-cancel'
            } %}
            {% set dLabelMap = {
              'draft':'Brouillon',
              'waiting':'En attente',
              'confirmed':'En attente',
              'assigned':'Prêt',
              'done':'Terminé',
              'cancel':'Annulé'
            } %}
            {% if dKey %}
              <span class="status-badge {{ dClassMap[dKey] }}" data-field="delivery_state" title="{{ dRaw }}">
                {{ dLabelMap[dKey] }}
              </span>
            {% else %}
              <span class="status-badge status-unknown" data-field="delivery_state" title="—">—</span>
            {% endif %}
          </td>

          {% if view != 'tablet' %}
          <td>
            {{ o.customer_name }}
          </td>
          {% endif %}
          <td class="d-none d-lg-table-cell">
            {{ o.prepared_by_label ?? '' }}
          </td>
          <td class="text-end d-none d-lg-table-cell">{{ o.item_count }}</td>
          <td class="d-none d-lg-table-cell">{{ o.source }}</td>
          <td class="d-none d-lg-table-cell">
            {% set parts = [] %}
            {% if o.shipping_carrier %}{% set parts = parts|merge([o.shipping_carrier]) %}{% endif %}
            {% if o.shipping_service %}{% set parts = parts|merge([o.shipping_service]) %}{% endif %}
            {{ parts|join(' · ') }}
          </td>
          <td class="d-none d-md-table-cell">{{ o.placed_at ? o.placed_at|date('Y-m-d H:i') : '' }}</td>
          <td>
            <div class="btn-group btn-group-sm" role="group">
              <a class="btn btn-outline-primary"  title="Traitement"
                 href="{{ path('admin_orders_process', app.request.query.all | merge({'id': o.id})) }}">Traiter</a>
            </div>
          </td>
        </tr>
      {% else %}
        <tr><td colspan="10" class="text-center text-muted">Aucune commande.</td></tr>
      {% endfor %}
      </tbody>
    </table>
  </div>

  {% include 'admin/_pagination.html.twig' %}
</div>

{# === Live sync des statuts === #}
<script>
(function(){
  const table = document.querySelector('table.table');
  if (!table) return;

  const statusLabelMap = {
    draft: 'Devis',
    sent: 'Devis envoyé',
    sale: 'Confirmée',
    done: 'Terminée',
    cancel: 'Annulée',
    processing: 'En préparation',
    ready: 'Prête',
    shipped: 'Expédiée',
    delivered: 'Livrée',
    error: 'Erreur',
    failed: 'Échec',
    returned: 'Retournée',
    unknown: '—'
  };
  const statusClass = (key) => {
    const known = ['draft','sent','sale','done','cancel','processing','ready','shipped','delivered','error','failed','returned'];
    const k = (key || '').toLowerCase();
    return 'status-badge ' + (known.includes(k) ? ('status-' + k) : 'status-unknown');
  };

  const prepLabelMap = {
    draft:'Brouillon',
    waiting:'En attente',
    confirmed:'En attente',
    assigned:'Prêt',
    done:'Terminé',
    cancel:'Annulé'
  };
  const prepClassMap = {
    draft:'status-badge status-draft',
    waiting:'status-badge status-processing',
    confirmed:'status-badge status-processing',
    assigned:'status-badge status-ready',
    done:'status-badge status-done',
    cancel:'status-badge status-cancel'
  };

  const endpoint = '{{ path("admin_orders_statuses") }}';

  function collectIds() {
    const rows = Array.from(table.querySelectorAll('tbody tr[data-order-id]'));
    const ids = rows.map(r => parseInt(r.getAttribute('data-order-id') || '0', 10)).filter(v => v > 0);
    return Array.from(new Set(ids));
  }

  function updateRow(row, payload) {
    if (!payload) return;
    const statusEl = row.querySelector('[data-field="status"]');
    if (statusEl) {
      const key = (payload.status || '').toLowerCase() || 'unknown';
      statusEl.className = statusClass(key);
      statusEl.textContent = statusLabelMap[key] ?? (payload.status || '—');
      statusEl.title = payload.status || '—';
    }
    const prepEl = row.querySelector('[data-field="delivery_state"]');
    if (prepEl) {
      const k = (payload.delivery_state || '').toLowerCase();
      if (k && prepClassMap[k]) {
        prepEl.className = prepClassMap[k];
        prepEl.textContent = prepLabelMap[k] || payload.delivery_state;
        prepEl.title = payload.delivery_state || '';
      } else {
        prepEl.className = 'status-badge status-unknown';
        prepEl.textContent = '—';
        prepEl.title = '—';
      }
    }
  }

  let timer = null;
  async function tick() {
    const ids = collectIds();
    if (ids.length === 0) return;
    try {
      const url = endpoint + '?ids=' + encodeURIComponent(ids.join(','));
      const res = await fetch(url, { headers: { 'Accept': 'application/json' }, credentials: 'same-origin' });
      if (!res.ok) return;
      const data = await res.json();
      const byId = {};
      for (const it of data) { byId[it.id] = it; }
      const rows = Array.from(table.querySelectorAll('tbody tr[data-order-id]'));
      for (const row of rows) {
        const id = parseInt(row.getAttribute('data-order-id') || '0', 10);
        if (id > 0) updateRow(row, byId[id]);
      }
    } catch (_) {
      // silencieux
    }
  }

  function start() {
    if (timer) clearInterval(timer);
    tick();
    timer = setInterval(tick, 5000);
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) { tick(); }
    });
  }

  start();
})();
</script>
{% endblock %}

